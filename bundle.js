(()=>{"use strict";var n={426:(n,t,e)=>{e.d(t,{Z:()=>s});var o=e(537),r=e.n(o),i=e(645),a=e.n(i)()(r());a.push([n.id,"*,*::before,*::after {\n    margin: 0;\n    box-sizing: border-box;\n    font-family: Arial, Helvetica, sans-serif;\n}\n\nbody {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: 100vw;\n    height: 100vh;\n    background-color: rgb(8, 22, 36);\n    margin-top: 30px;\n}\n\n.container {\n    display: flex;\n    width: 70%;\n    max-width: 500px;\n    border: solid 4px white;\n}\n\n.container .row,\n.results-grid .row {\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    width: 5px;\n}\n\n.row .box {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-weight: bold;\n    border: solid 2px white;\n    aspect-ratio: 1 / 1;\n    position: relative;\n}\n\n.container .row .box:hover {\n    background-color: rgb(6, 18, 31);\n}\n\n.modal {\n    text-align: center;\n    background-color: #cee61c;\n    font-size: 80%;\n    color: rgb(8, 22, 36);\n    padding: 7px;\n    position: absolute;\n    /* left: -120px; */\n    top: 50px;\n    border: solid 3px rgb(8, 22, 36);\n    border-top-left-radius: 10px;\n    border-bottom-left-radius: 10px;\n    border-bottom-right-radius: 10px;\n    z-index: 1;\n}\n\n#knight {\n    width: 40px;\n    filter: invert(92%) sepia(6%) saturate(451%) hue-rotate(152deg) brightness(85%) contrast(102%);\n}\n\n.results-grid {\n    display: flex;\n    justify-content: center;\n    width: 300px;\n    height: 300px;\n    background-color: rgb(8, 22, 36);\n    border: solid 4px white;\n    position: absolute;\n    z-index: 3;\n}\n\n.close-button {\n    position: absolute;\n    bottom: -40px;\n    z-index: 3;\n}\n\n#overlay {\n    background-color: rgba(0,0,0, .8);\n    position: fixed;\n    opacity: 0;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    z-index: 2;\n    pointer-events: none;\n}\n\n#overlay.active {\n    opacity: 1;\n    pointer-events: all;\n}\n\nbutton {\n    border: none;\n    outline: none;\n    background-color: #cee61c;\n    color: rgb(8, 22, 36);\n    font-weight: bold;\n    padding: 9px;\n    border-radius: 5px;\n    cursor: pointer;\n}\n\n.close-button {\n    background-color: red;\n    color: white;\n}\n\n.text-result-container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    text-align: center;\n    gap: 4px;\n    color: white;\n}\n\n.text-result-container button {\n    width: 60%;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,sBAAsB;IACtB,yCAAyC;AAC7C;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,YAAY;IACZ,aAAa;IACb,gCAAgC;IAChC,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,UAAU;IACV,gBAAgB;IAChB,uBAAuB;AAC3B;;AAEA;;IAEI,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,YAAY;IACZ,UAAU;AACd;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,iBAAiB;IACjB,uBAAuB;IACvB,mBAAmB;IACnB,kBAAkB;AACtB;;AAEA;IACI,gCAAgC;AACpC;;AAEA;IACI,kBAAkB;IAClB,yBAAyB;IACzB,cAAc;IACd,qBAAqB;IACrB,YAAY;IACZ,kBAAkB;IAClB,kBAAkB;IAClB,SAAS;IACT,gCAAgC;IAChC,4BAA4B;IAC5B,+BAA+B;IAC/B,gCAAgC;IAChC,UAAU;AACd;;AAEA;IACI,WAAW;IACX,8FAA8F;AAClG;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,YAAY;IACZ,aAAa;IACb,gCAAgC;IAChC,uBAAuB;IACvB,kBAAkB;IAClB,UAAU;AACd;;AAEA;IACI,kBAAkB;IAClB,aAAa;IACb,UAAU;AACd;;AAEA;IACI,iCAAiC;IACjC,eAAe;IACf,UAAU;IACV,MAAM;IACN,OAAO;IACP,QAAQ;IACR,SAAS;IACT,UAAU;IACV,oBAAoB;AACxB;;AAEA;IACI,UAAU;IACV,mBAAmB;AACvB;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,yBAAyB;IACzB,qBAAqB;IACrB,iBAAiB;IACjB,YAAY;IACZ,kBAAkB;IAClB,eAAe;AACnB;;AAEA;IACI,qBAAqB;IACrB,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,kBAAkB;IAClB,QAAQ;IACR,YAAY;AAChB;;AAEA;IACI,UAAU;AACd",sourcesContent:["*,*::before,*::after {\n    margin: 0;\n    box-sizing: border-box;\n    font-family: Arial, Helvetica, sans-serif;\n}\n\nbody {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: 100vw;\n    height: 100vh;\n    background-color: rgb(8, 22, 36);\n    margin-top: 30px;\n}\n\n.container {\n    display: flex;\n    width: 70%;\n    max-width: 500px;\n    border: solid 4px white;\n}\n\n.container .row,\n.results-grid .row {\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    width: 5px;\n}\n\n.row .box {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-weight: bold;\n    border: solid 2px white;\n    aspect-ratio: 1 / 1;\n    position: relative;\n}\n\n.container .row .box:hover {\n    background-color: rgb(6, 18, 31);\n}\n\n.modal {\n    text-align: center;\n    background-color: #cee61c;\n    font-size: 80%;\n    color: rgb(8, 22, 36);\n    padding: 7px;\n    position: absolute;\n    /* left: -120px; */\n    top: 50px;\n    border: solid 3px rgb(8, 22, 36);\n    border-top-left-radius: 10px;\n    border-bottom-left-radius: 10px;\n    border-bottom-right-radius: 10px;\n    z-index: 1;\n}\n\n#knight {\n    width: 40px;\n    filter: invert(92%) sepia(6%) saturate(451%) hue-rotate(152deg) brightness(85%) contrast(102%);\n}\n\n.results-grid {\n    display: flex;\n    justify-content: center;\n    width: 300px;\n    height: 300px;\n    background-color: rgb(8, 22, 36);\n    border: solid 4px white;\n    position: absolute;\n    z-index: 3;\n}\n\n.close-button {\n    position: absolute;\n    bottom: -40px;\n    z-index: 3;\n}\n\n#overlay {\n    background-color: rgba(0,0,0, .8);\n    position: fixed;\n    opacity: 0;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    z-index: 2;\n    pointer-events: none;\n}\n\n#overlay.active {\n    opacity: 1;\n    pointer-events: all;\n}\n\nbutton {\n    border: none;\n    outline: none;\n    background-color: #cee61c;\n    color: rgb(8, 22, 36);\n    font-weight: bold;\n    padding: 9px;\n    border-radius: 5px;\n    cursor: pointer;\n}\n\n.close-button {\n    background-color: red;\n    color: white;\n}\n\n.text-result-container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    text-align: center;\n    gap: 4px;\n    color: white;\n}\n\n.text-result-container button {\n    width: 60%;\n}"],sourceRoot:""}]);const s=a},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",o=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),o&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),o&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,o,r,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(o)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var l=0;l<n.length;l++){var A=[].concat(n[l]);o&&a[A[0]]||(void 0!==i&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=i),e&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=e):A[2]=e),r&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=r):A[4]="".concat(r)),t.push(A))}},t}},537:n=>{n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */"),a=e.sources.map((function(n){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(n," */")}));return[t].concat(a).concat([i]).join("\n")}return[t].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,o=0;o<t.length;o++)if(t[o].identifier===n){e=o;break}return e}function o(n,o){for(var i={},a=[],s=0;s<n.length;s++){var c=n[s],l=o.base?c[0]+o.base:c[0],A=i[l]||0,d="".concat(l," ").concat(A);i[l]=A+1;var u=e(d),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)t[u].references++,t[u].updater(p);else{var h=r(p,o);o.byIndex=s,t.splice(s,0,{identifier:d,updater:h,references:1})}a.push(d)}return a}function r(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,r){var i=o(n=n||[],r=r||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var s=e(i[a]);t[s].references--}for(var c=o(n,r),l=0;l<i.length;l++){var A=e(i[l]);0===t[A].references&&(t[A].updater(),t.splice(A,1))}i=c}}},569:n=>{var t={};n.exports=function(n,e){var o=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var o="";e.supports&&(o+="@supports (".concat(e.supports,") {")),e.media&&(o+="@media ".concat(e.media," {"));var r=void 0!==e.layer;r&&(o+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),o+=e.css,r&&(o+="}"),e.media&&(o+="}"),e.supports&&(o+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(o,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}}},t={};function e(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={id:o,exports:{}};return n[o](i,i.exports,e),i.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var o in t)e.o(t,o)&&!e.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:t[o]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),(()=>{var n;e.g.importScripts&&(n=e.g.location+"");var t=e.g.document;if(!n&&t&&(t.currentScript&&(n=t.currentScript.src),!n)){var o=t.getElementsByTagName("script");o.length&&(n=o[o.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=n})(),e.nc=void 0,(()=>{var n=e(379),t=e.n(n),o=e(795),r=e.n(o),i=e(569),a=e.n(i),s=e(565),c=e.n(s),l=e(216),A=e.n(l),d=e(589),u=e.n(d),p=e(426),h={};h.styleTagTransform=u(),h.setAttributes=c(),h.insert=a().bind(null,"head"),h.domAPI=r(),h.insertStyleElement=A(),t()(p.Z,h),p.Z&&p.Z.locals&&p.Z.locals;const g=[[-1,-2],[-2,-1],[-2,1],[-1,2],[1,2],[2,1],[2,-1],[1,-2]];let C=null;const m=(n,t)=>{const e=[];for(;n[t];)e.push(t),t=n[t];return e.push(t),e.reverse()},b={x:null,y:null},f={x:null,y:null},x=e.p+"knight.svg";class v{static gridSize=8;static makeGrid(){if(document.querySelector(".results-grid"))return;const n=document.createElement("div");n.className="results-grid";const t=document.createElement("button");t.className="close-button",t.textContent="Close",n.appendChild(t),t.addEventListener("click",(()=>{this.removeElement(n,t),this.toggleOverlay()})),document.body.append(n);for(let t=0;t<this.gridSize;t++){const e=document.createElement("div");e.className="row",n.append(e);for(let n=0;n<this.gridSize;n++){const o=document.createElement("div");o.className="box",e.append(o),o.dataset.x=t,o.dataset.y=n}}this.displayPathsOnGrid(C),n.classList.add("visible")}static displayPathsOnGrid(n){const t=document.querySelectorAll(".box");let e=0;for(let o of n)t.forEach((n=>{n.dataset.x===o[0]&&n.dataset.y===o[2]&&(n.textContent=e,n.style.backgroundColor="white",0===e&&(n.textContent="S",n.style.backgroundColor="rgb(8, 22, 36)",n.style.color="white"),e++)}))}static removeElement(n,t){document.body.removeChild(n),t&&n.removeChild(t)}static toggleOverlay(){const n=document.querySelector("#overlay");n.classList.contains("active")&&n.classList.remove("active")}}(class{static gridSize=8;static renderUI(){this.createGrid()}static createGrid(n=!1){const t=document.createElement("div");t.className=n?"results-grid":"container",document.body.append(t);for(let e=0;e<this.gridSize;e++){const o=document.createElement("div");o.className="row",t.append(o),o.dataset.x=e;for(let e=0;e<this.gridSize;e++){const r=document.createElement("div");r.className="box",o.append(r),r.dataset.y=e,n||this.displayKnightMovesOnClick(r,o,t)}}}static displayKnightMovesOnClick(n,t,e){n.addEventListener("click",(()=>{if("true"===e.dataset.pathFinished)return;const o=`${t.dataset.x},${n.dataset.y}`;this.displayKnightOnGrid(x,n);const r=((n,t)=>null===b.x&&null===b.y?(b.x=+n[0],b.y=+n[2],void(t.dataset.position="start")):(f.x=+n[0],f.y=+n[2],t.dataset.position="end",((n,t)=>{const e=[n],o=new Set,r={};for(;e.length>0;){const n=e.shift(),i=`${n.x},${n.y}`;if(0===Object.keys(r).length&&(r[i]=null),o.add(i),n.x===t.x&&n.y===t.y)return m(r,i);for(let t of g){const a={x:n.x+t[0],y:n.y+t[1]},s=`${a.x},${a.y}`;a.x>=0&&a.x<8&&a.y>=0&&a.y<8&&(o.has(s)||(r[s]=i,e.push(a)))}}})(b,f)))(o,n);r&&(C=r,this.displayResult(r)),this.coordinateModal(n,o,e)}))}static coordinateModal(n,t,e){const o=document.createElement("div");o.className="modal","start"===n.dataset.position?o.textContent=`Start: ${t}`:(o.textContent=`Destination: ${t}`,e.dataset.pathFinished="true"),n.append(o)}static displayResult(n){const t=document.createElement("div");t.className="text-result-container";const e=document.createElement("p"),o=document.createElement("p");e.textContent=`You made it in ${n.length-1} moves.`;for(let t of n)o.textContent+=` [${t}] =>`;const r=o.textContent.substring(0,o.textContent.length-2);o.textContent=r,document.body.append(t),t.append(e,o),this.renderResultsButton(t)}static displayKnightOnGrid(n,t){const e=new Image;e.src=n,e.id="knight",t.appendChild(e)}static renderResultsButton(n){const t=document.createElement("button");t.className="results-button",t.textContent="See moves";const e=document.createElement("button");e.className="restart-button",e.textContent="New path",t.addEventListener("click",(()=>{this.visualResultModal()})),e.addEventListener("click",(()=>{this.startNewRoute()})),n.append(t,e)}static visualResultModal(){v.makeGrid(),document.querySelector(".results-grid").classList.add("visible"),document.getElementById("overlay").classList.add("active")}static startNewRoute(){document.querySelector(".container"),this.clearBoard(),b.x=null,b.y=null,f.x=null,f.y=null,this.renderUI()}static clearBoard(){const n=document.body,t=document.getElementById("overlay");for(;n.hasChildNodes();){if(n.lastChild===t)return;n.removeChild(n.lastChild)}}}).renderUI()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,